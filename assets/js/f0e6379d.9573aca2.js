"use strict"; (self.webpackChunkhtdocs = self.webpackChunkhtdocs || []).push([[470], { 3905: function (e, t, n) { n.d(t, { Zo: function () { return l }, kt: function () { return f } }); var r = n(7294); function i(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e } function a(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(e); t && (r = r.filter((function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable }))), n.push.apply(n, r) } return n } function o(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? a(Object(n), !0).forEach((function (t) { i(e, t, n[t]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : a(Object(n)).forEach((function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) })) } return e } function s(e, t) { if (null == e) return {}; var n, r, i = function (e, t) { if (null == e) return {}; var n, r, i = {}, a = Object.keys(e); for (r = 0; r < a.length; r++)n = a[r], t.indexOf(n) >= 0 || (i[n] = e[n]); return i }(e, t); if (Object.getOwnPropertySymbols) { var a = Object.getOwnPropertySymbols(e); for (r = 0; r < a.length; r++)n = a[r], t.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(e, n) && (i[n] = e[n]) } return i } var u = r.createContext({}), c = function (e) { var t = r.useContext(u), n = t; return e && (n = "function" == typeof e ? e(t) : o(o({}, t), e)), n }, l = function (e) { var t = c(e.components); return r.createElement(u.Provider, { value: t }, e.children) }, m = { inlineCode: "code", wrapper: function (e) { var t = e.children; return r.createElement(r.Fragment, {}, t) } }, d = r.forwardRef((function (e, t) { var n = e.components, i = e.mdxType, a = e.originalType, u = e.parentName, l = s(e, ["components", "mdxType", "originalType", "parentName"]), d = c(n), f = i, p = d["".concat(u, ".").concat(f)] || d[f] || m[f] || a; return n ? r.createElement(p, o(o({ ref: t }, l), {}, { components: n })) : r.createElement(p, o({ ref: t }, l)) })); function f(e, t) { var n = arguments, i = t && t.mdxType; if ("string" == typeof e || i) { var a = n.length, o = new Array(a); o[0] = d; var s = {}; for (var u in t) hasOwnProperty.call(t, u) && (s[u] = t[u]); s.originalType = e, s.mdxType = "string" == typeof e ? e : i, o[1] = s; for (var c = 2; c < a; c++)o[c] = n[c]; return r.createElement.apply(null, o) } return r.createElement.apply(null, n) } d.displayName = "MDXCreateElement" }, 2634: function (e, t, n) { n.r(t), n.d(t, { assets: function () { return l }, contentTitle: function () { return u }, default: function () { return f }, frontMatter: function () { return s }, metadata: function () { return c }, toc: function () { return m } }); var r = n(7462), i = n(3366), a = (n(7294), n(3905)), o = ["components"], s = { description: "In the most basic sense, an inode is \u201ca data structure that stores information about a file or directory except its name and its actual data\u201d." }, u = "What\u2019s The Inode Limit", c = { unversionedId: "fair-usage-limits/inode-limit", id: "fair-usage-limits/inode-limit", title: "What\u2019s The Inode Limit", description: "In the most basic sense, an inode is \u201ca data structure that stores information about a file or directory except its name and its actual data\u201d.", source: "@site/docs/fair-usage-limits/inode-limit.md", sourceDirName: "fair-usage-limits", slug: "/fair-usage-limits/inode-limit", permalink: "/fair-usage-limits/inode-limit", draft: !1, tags: [], version: "current", frontMatter: { description: "In the most basic sense, an inode is \u201ca data structure that stores information about a file or directory except its name and its actual data\u201d." }, sidebar: "tutorialSidebar", previous: { title: "What's The Hit Limit", permalink: "/fair-usage-limits/hit-limit" }, next: { title: "What's The MySQL Limit", permalink: "/fair-usage-limits/mysql-limit" } }, l = {}, m = [{ value: "Why do I have a limited number of inodes?", id: "why-do-i-have-a-limited-number-of-inodes", level: 2 }, { value: "How can I get more inodes?", id: "how-can-i-get-more-inodes", level: 2 }], d = { toc: m }; function f(e) { var t = e.components, n = (0, i.Z)(e, o); return (0, a.kt)("wrapper", (0, r.Z)({}, d, n, { components: t, mdxType: "MDXLayout" }), (0, a.kt)("h1", { id: "whats-the-inode-limit" }, "What\u2019s The Inode Limit"), (0, a.kt)("p", null, "In the most basic sense, an inode is \u201ca data structure that stores information about a file or directory except its name and its actual data\u201d."), (0, a.kt)("p", null, "This essentially means that an inode represents any one file or any one directory. For example, a file in a directory totals two inodes."), (0, a.kt)("h2", { id: "why-do-i-have-a-limited-number-of-inodes" }, "Why do I have a limited number of inodes?"), (0, a.kt)("p", null, "We limit the number of inodes because we need our servers to stay fast, reliable, and free of spam for all of our customers. Currently, all accounts are limited to 30,019 inodes."), (0, a.kt)("h2", { id: "how-can-i-get-more-inodes" }, "How can I get more inodes?"), (0, a.kt)("p", null, "If you require more than 30,019 inodes, please consider upgrading your account to ", (0, a.kt)("a", { parentName: "p", href: "https://pleasantfree.com/go/ifastnet" }, "premium hosting"), ", where you get many more ~ 200, 000 (unlimited).")) } f.isMDXComponent = !0 } }]);